name: 'ECS Deploy'

on: 
  workflow_dispatch:
    inputs:
      region:
        type: choice
        description: Select region
        default: us-east-1
        options: 
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
      env:
        type: choice
        default: staging
        description: Select environment to deploy
        options: 
          - production
          - staging
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS access'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS secret'
        required: true

permissions:
  contents: read

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: deployments/ecsdeploy

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    
    # This step is run when the tag is release-XXX
    - name: Sets env vars for staging
      if: github.event.inputs.env == 'staging'
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
    
     # This step is run when the tag is release-XXX
    - name: Sets env vars for production
      if: github.event.inputs.env == 'production'
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
    
    - name: Check number of Availability Zones
      run: |
        output=$(aws ec2 describe-availability-zones --region ${{ github.event.inputs.region }} | jq -r '.AvailabilityZones[].ZoneName')
        arr=($output)
        len=${#arr[@]}
        if (( $len < ${{ github.event.inputs.subnets }} )); then 
          echo You chose to deploy in ${{ github.event.inputs.subnets }} zones, but there are only $len Availability Zones in region ${{ github.event.inputs.region }};   exit 1
        fi;
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -target=module.ecs -var="region=${{ github.event.inputs.region }}" -var="env=${{ github.event.inputs.env }}" -input=true -out=.terraform/terraform.tfplan
  
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.env }}
    needs: terraform-plan

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: deployments/ecsdeploy

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    
    # This step is run when the tag is release-XXX
    - name: Sets env vars for staging
      if: github.event.inputs.env == 'staging'
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
    
     # This step is run when the tag is release-XXX
    - name: Sets env vars for production
      if: github.event.inputs.env == 'production'
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
    
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -target=module.ecs -var="region=${{ github.event.inputs.region }}" -var="subnets=${{ github.event.inputs.subnets }}" -var="env=${{ github.event.inputs.env }} -out=.terraform/terraform.tfplan
    
    # # Generates an execution plan for Terraform
    - name: Terraform apply
      run: terraform apply -target=module.ecs -var="region=${{ github.event.inputs.region }}" -var="env=${{ github.event.inputs.env }}" -input=true