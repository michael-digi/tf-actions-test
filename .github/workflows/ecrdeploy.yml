name: 'ECR Deploy'

on: 
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: '' # Will be injected in a step below
  AWS_SECRET_ACCESS_KEY: '' # Will be injected in a step below
  ENV: admin # Change this to deploy to account of choice
  AWS_REGION: us-east-1 # Change this to deploy to region of choice
  AWS_ACCOUNT_ID: '' # Will be looked up via the access/secret key and injected in a step below

permissions:
  contents: read

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: deployments/ecr-deploy/$ENV/$REGION

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Sets env vars for admin
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_ADMIN }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_ADMIN }}" >> $GITHUB_ENV

    - name: Inject AWS_ACCOUNT_ID into env
      run: |
        accountId=$(aws sts get-caller-identity | jq -r .Account)
        echo "AWS_ACCOUNT_ID=$accountId" >> $GITHUB_ENV

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    
    # # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt 

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend=true -backend-config="bucket=$AWS_ACCOUNT_ID-$ENV-terraform-state" -backend-config="key=$AWS_REGION/state/terraform.tfstate" -backend-config="region=us-east-1" -backend-config="dynamodb_table=terraform-state" -force-copy

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -target=module.ecr_repo -var="region=$AWS_REGION" -input=true -out=.terraform/terraform.tfplan
  
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: needs-approval
    needs: terraform-plan

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: deployments/ecr-deploy/$ENV/$REGION

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Sets env vars for admin
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_ADMIN }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_ADMIN }}" >> $GITHUB_ENV

    - name: Inject AWS_ACCOUNT_ID into env
      run: |
        accountId=$(aws sts get-caller-identity | jq -r .Account)
        echo "AWS_ACCOUNT_ID=$accountId" >> $GITHUB_ENV

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    
    # # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend=true -backend-config="bucket=$AWS_ACCOUNT_ID-$ENV-terraform-state" -backend-config="key=$AWS_REGION/state/terraform.tfstate" -backend-config="region=us-east-1" -backend-config="dynamodb_table=terraform-state" -force-copy

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -target=module.ecr_repo -var="region=$AWS_REGION" -input=true -out=.terraform/terraform.tfplan
    
    # Generates an execution plan for Terraform
    - name: Terraform Apply
      run: terraform apply -target=module.ecr_repo -input=true .terraform/terraform.tfplan