name: 'Network Deploy'

on: 
  workflow_dispatch:
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS access'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS secret'
        required: true
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ENV: production
  AWS_REGION: us-west-2
  AWS_ACCOUNT_ID: ''
  NUM_SUBNETS: 3
  
permissions:
  contents: read

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: deployments/network-deploy

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # This step is run when the tag is release-XXX
    - name: Sets env vars for staging
      if: ${{ env.ENV == 'staging' }}
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
    
    # This step is run when the tag is release-XXX
    - name: Sets env vars for production
      if: ${{ env.ENV == 'production' }}
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
    
    - name: Check Account
      run: |
        accountId=$(aws sts get-caller-identity | jq -r .Account)
        echo "AWS_ACCOUNT_ID=$accountId" >> $GITHUB_ENV
    
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt 

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend=true -backend-config="bucket=$AWS_ACCOUNT_ID-$ENV-terraform-state" -backend-config="key=$AWS_REGION/state/terraform.tfstate" -backend-config="region=us-east-1" -backend-config="dynamodb_table=terraform-state" -force-copy

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -target=module.networking -var="region=$AWS_REGION" -var="subnets=$NUM_SUBNETS" -var="env=$ENV" -input=true

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: needs-approval
    needs: terraform-plan

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: deployments/network-deploy

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # This step is run when the tag is release-XXX
    - name: Sets env vars for staging
      if: ${{ env.ENV == 'staging' }}
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
    
    # This step is run when the tag is release-XXX
    - name: Sets env vars for production
      if: ${{ env.ENV == 'production' }}
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
    
    - name: Check Account
      run: |
        accountId=$(aws sts get-caller-identity | jq -r .Account)
        echo "AWS_ACCOUNT_ID=$accountId" >> $GITHUB_ENV

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend=true -backend-config="bucket=$AWS_ACCOUNT_ID-$ENV-terraform-state" -backend-config="key=$AWS_REGION/state/terraform.tfstate" -backend-config="region=us-east-1" -backend-config="dynamodb_table=terraform-state" -force-copy

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -target=module.networking -var="region=$AWS_REGION" -var="subnets=$NUM_SUBNETS" -var="env=$ENV" -input=true -out=.terraform/terraform.tfplan
    
    # Generates an execution plan for Terraform
    - name: Terraform Apply
      run: terraform apply -target=module.networking -input=true .terraform/terraform.tfplan